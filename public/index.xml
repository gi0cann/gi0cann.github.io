<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gi0cann&#39;s notes</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on gi0cann&#39;s notes</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Feb 2025 23:46:51 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mobile Hacking Lab Android Lab - Strings Writeup</title>
      <link>http://localhost:1313/posts/mobilehackinglab_strings/</link>
      <pubDate>Sat, 01 Feb 2025 23:46:51 -0500</pubDate>
      <guid>http://localhost:1313/posts/mobilehackinglab_strings/</guid>
      <description>&lt;p&gt;Our objective for the Strings lab is to find the hidden flag by investigating the app components and by using dynamic instrumentation.&lt;/p&gt;&#xA;&lt;p&gt;Running the provided application gives use the following.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/mhl_strings.png&#34; alt=&#34;Strings main activity screenshot&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Looking at the AndroidManifest.xml file for the application we notice that in addition to the main activity the application has another exported activity &lt;code&gt;com.mobilehackinglab.challenge.Activity2&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;activity&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.mobilehackinglab.challenge.Activity2&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;android:exported=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.action.VIEW&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.category.DEFAULT&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.category.BROWSABLE&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;android:scheme=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mhl&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;android:host=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the intent filter for this activity we see that to launch it we need to use the URI scheme &lt;code&gt;mhl&lt;/code&gt; and the host &lt;code&gt;labs&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Insomni&#39;hack teaser 2019 CTF RE: beginner reverse writeup</title>
      <link>http://localhost:1313/posts/insomnihackteaser2019-beginner_reverse-writeups/</link>
      <pubDate>Mon, 21 Jan 2019 17:08:42 -0400</pubDate>
      <guid>http://localhost:1313/posts/insomnihackteaser2019-beginner_reverse-writeups/</guid>
      <description>&lt;h2 id=&#34;challenge&#34;&gt;Challenge:&lt;/h2&gt;&#xA;&lt;p&gt;A babyrust to become a hardcore reverser.&lt;/p&gt;&#xA;&lt;p&gt;The challenge provides us with a 64 bit Rust binary that we have to reverse engineer to get the flag.&lt;/p&gt;&#xA;&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;&#xA;&lt;p&gt;We start by opening the binary in Binary Ninja. The function we are interested in is &amp;ldquo;beginer_reverse::main::h80fa15281f646bc1&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;At the beginning of the function we see some values from the &amp;ldquo;.rodata&amp;rdquo; section being stored onto the stack. The &amp;ldquo;std::io::Stdin::read_line&amp;rdquo; function is called next to get our input.&lt;/p&gt;</description>
    </item>
    <item>
      <title>35c3 Junior CTF writeup</title>
      <link>http://localhost:1313/posts/35c3juniorctf-writeups/</link>
      <pubDate>Sun, 30 Dec 2018 21:08:42 -0400</pubDate>
      <guid>http://localhost:1313/posts/35c3juniorctf-writeups/</guid>
      <description>&lt;h2 id=&#34;35c3-junior-ctf-pwn-flags&#34;&gt;35c3 Junior CTF Pwn: flags&lt;/h2&gt;&#xA;&lt;p&gt;We are presented with the following web page:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/Mainpage.png&#34; alt=&#34;mainpage&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Looking at the code on the page we see that it take the value of the &amp;lsquo;Accept-Language&amp;rsquo; header and uses it to read and display the flag image.&lt;/p&gt;&#xA;&lt;p&gt;Our goal is to provide the correct input to read the flag located at /flag on the filesystem.&#xA;When we input the value for a file that doesn&amp;rsquo;t exist we get the following error:&lt;/p&gt;</description>
    </item>
    <item>
      <title>X Masctf2018 Writeups</title>
      <link>http://localhost:1313/posts/x-masctf2018-writeups/</link>
      <pubDate>Sun, 16 Dec 2018 21:08:42 -0400</pubDate>
      <guid>http://localhost:1313/posts/x-masctf2018-writeups/</guid>
      <description>&lt;h2 id=&#34;x-masctf-2018-re-endless-christmas&#34;&gt;X-MasCTF 2018 RE: Endless Christmas&lt;/h2&gt;&#xA;&lt;p&gt;We are given the &amp;lsquo;chall&amp;rsquo; file.&lt;/p&gt;&#xA;&lt;p&gt;Running the file command shows us that it&amp;rsquo;s a 64 bit ELF binary.&lt;/p&gt;&#xA;&lt;p&gt;We proceed to open the file with radare2:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r2 -A chall&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/chall-main.png&#34; alt=&#34;chall-main&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Looking at the main function we see that it creates and executes a file from the result of the function @ 0x4006a4.&lt;/p&gt;&#xA;&lt;h3 id=&#34;main&#34;&gt;main&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-highlight&#34; data-lang=&#34;highlight&#34;&gt;retrieve argc store in local variable local_14h&#xA;retrieve argv store in local variable local_20h&#xA;store &amp;#34;fileXXXXXX&amp;#34; in local variable template&#xA;&#xA;call 4006a4(0x6b7ce0, 0x601080, 0xb6b21)&#xA;0x6b7ce0 - global variable empty&#xA;0x601080 - global variable pointing to string of chars&#xA;&#xA;call mkstemp(template)&#xA;store return value in fildes = file descriptor&#xA;&#xA;call fchmod(fildes, 0x1ff)&#xA;&#xA;call write(fildes, 0x6b7ce0, 0x12c000)&#xA;&#xA;call fsync(fildes)&#xA;&#xA;call close(fildes)&#xA;&#xA;call execve(template, 0x0, 0x0)&#xA;&#xA;return&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Running the chall binary generates 13 files and then prompts us for the flag.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
