<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gi0cann&#39;s notes</title>
    <link>http://gi0cann.github.io/</link>
    <description>Recent content on gi0cann&#39;s notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>youremail@domain.com (Some Person)</managingEditor>
    <webMaster>youremail@domain.com (Some Person)</webMaster>
    <lastBuildDate>Sun, 30 Dec 2018 21:08:42 -0400</lastBuildDate>
    
	<atom:link href="http://gi0cann.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>35c3 Junior CTF Pwn: 1996</title>
      <link>http://gi0cann.github.io/post/35c3juniorctf-1996/</link>
      <pubDate>Sun, 30 Dec 2018 21:08:42 -0400</pubDate>
      <author>youremail@domain.com (Some Person)</author>
      <guid>http://gi0cann.github.io/post/35c3juniorctf-1996/</guid>
      <description>We are giving a zip file containing the following files &amp;ldquo;1996&amp;rdquo; and &amp;ldquo;1996.cpp&amp;rdquo;. 1996 is 64 bit ELF binary and 1996.cpp contains its corresponding source code. During the ctf the target running the binary was at 35.207.132.47:22227.
1996.cpp:
// compile with -no-pie -fno-stack-protector  #include &amp;lt;iostream&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; using namespace std; void spawn_shell() { char* args[] = {(char*)&amp;#34;/bin/bash&amp;#34;, NULL}; execve(&amp;#34;/bin/bash&amp;#34;, args, NULL); } int main() { char buf[1024]; cout &amp;lt;&amp;lt; &amp;#34;Which environment variable do you want to read?</description>
    </item>
    
    <item>
      <title>35c3 Junior CTF Pwn: flags</title>
      <link>http://gi0cann.github.io/post/35c3juniorctf-flags/</link>
      <pubDate>Sun, 30 Dec 2018 21:08:42 -0400</pubDate>
      <author>youremail@domain.com (Some Person)</author>
      <guid>http://gi0cann.github.io/post/35c3juniorctf-flags/</guid>
      <description>We are presented with the following web page:
Looking at the code on the page we see that it take the value of the &amp;lsquo;Accept-Language&amp;rsquo; header and uses it to read and display the flag image.
Our goal is to provide the correct input to read the flag located at /flag on the filesystem. When we input the value for a file that doesn&amp;rsquo;t exist we get the following error:</description>
    </item>
    
    <item>
      <title>X-MasCTF 2018 RE: Endless Christmas</title>
      <link>http://gi0cann.github.io/post/x-masctf2018-endless-christmas/</link>
      <pubDate>Sun, 16 Dec 2018 21:08:42 -0400</pubDate>
      <author>youremail@domain.com (Some Person)</author>
      <guid>http://gi0cann.github.io/post/x-masctf2018-endless-christmas/</guid>
      <description>We are given the &amp;lsquo;chall&amp;rsquo; file.
Running the file command shows us that it&amp;rsquo;s a 64 bit ELF binary.
We proceed to open the file with radare2:
r2 -A chall Looking at the main function we see that it creates and executes a file from the result of the function @ 0x4006a4.
main retrieve argc store in local variable local_14h retrieve argv store in local variable local_20h store &amp;#34;fileXXXXXX&amp;#34; in local variable template call 4006a4(0x6b7ce0, 0x601080, 0xb6b21) 0x6b7ce0 - global variable empty 0x601080 - global variable pointing to string of chars call mkstemp(template) store return value in fildes = file descriptor call fchmod(fildes, 0x1ff) call write(fildes, 0x6b7ce0, 0x12c000) call fsync(fildes) call close(fildes) call execve(template, 0x0, 0x0) return Running the chall binary generates 13 files and then prompts us for the flag.</description>
    </item>
    
    <item>
      <title>X-MasCTF 2018 WEB: Our Christmas Wishlist</title>
      <link>http://gi0cann.github.io/post/x-masctf2018-our-christmas-wishlist/</link>
      <pubDate>Sun, 16 Dec 2018 21:08:42 -0400</pubDate>
      <author>youremail@domain.com (Some Person)</author>
      <guid>http://gi0cann.github.io/post/x-masctf2018-our-christmas-wishlist/</guid>
      <description>We are presented with a page with a textarea where you can input text.
We put hello in the textarea an submit the request:
We get the following response:
Taking a look at the request in burp we see the following request:
POST / HTTP/1.1 Host: 95.179.163.167:12001 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://95.179.163.167:12001/ Content-Type: application/xml Content-Length: 24 Connection: close Cookie: PHPSESSID=9cef815bea8ae2420273c0fbf61f3bcb &amp;lt;message&amp;gt;hello&amp;lt;/message&amp;gt; with the following response:</description>
    </item>
    
  </channel>
</rss>