<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on gi0cann&#39;s notes</title>
    <link>https://gi0cann.github.io/post/</link>
    <description>Recent content in Posts on gi0cann&#39;s notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>youremail@domain.com (gi0cann)</managingEditor>
    <webMaster>youremail@domain.com (gi0cann)</webMaster>
    <lastBuildDate>Mon, 21 Jan 2019 17:08:42 -0400</lastBuildDate>
    
	<atom:link href="https://gi0cann.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Insomni&#39;hack teaser 2019 CTF RE: beginner reverse writeup</title>
      <link>https://gi0cann.github.io/post/insomnihackteaser2019-beginner_reverse-writeups/</link>
      <pubDate>Mon, 21 Jan 2019 17:08:42 -0400</pubDate>
      <author>youremail@domain.com (gi0cann)</author>
      <guid>https://gi0cann.github.io/post/insomnihackteaser2019-beginner_reverse-writeups/</guid>
      <description>Challenge: A babyrust to become a hardcore reverser.
The challenge provides us with a 64 bit Rust binary that we have to reverse engineer to get the flag.
Solution: We start by opening the binary in Binary Ninja. The function we are interested in is &amp;ldquo;beginer_reverse::main::h80fa15281f646bc1&amp;rdquo;.
At the beginning of the function we see some values from the &amp;ldquo;.rodata&amp;rdquo; section being stored onto the stack. The &amp;ldquo;std::io::Stdin::read_line&amp;rdquo; function is called next to get our input.</description>
    </item>
    
    <item>
      <title>35c3 Junior CTF writeup</title>
      <link>https://gi0cann.github.io/post/35c3juniorctf-writeups/</link>
      <pubDate>Sun, 30 Dec 2018 21:08:42 -0400</pubDate>
      <author>youremail@domain.com (gi0cann)</author>
      <guid>https://gi0cann.github.io/post/35c3juniorctf-writeups/</guid>
      <description>35c3 Junior CTF Pwn: flags We are presented with the following web page:
Looking at the code on the page we see that it take the value of the &amp;lsquo;Accept-Language&amp;rsquo; header and uses it to read and display the flag image.
Our goal is to provide the correct input to read the flag located at /flag on the filesystem. When we input the value for a file that doesn&amp;rsquo;t exist we get the following error:</description>
    </item>
    
    <item>
      <title>X-MasCTF 2018 writeup</title>
      <link>https://gi0cann.github.io/post/x-masctf2018-writeups/</link>
      <pubDate>Sun, 16 Dec 2018 21:08:42 -0400</pubDate>
      <author>youremail@domain.com (gi0cann)</author>
      <guid>https://gi0cann.github.io/post/x-masctf2018-writeups/</guid>
      <description>X-MasCTF 2018 RE: Endless Christmas We are given the &amp;lsquo;chall&amp;rsquo; file.
Running the file command shows us that it&amp;rsquo;s a 64 bit ELF binary.
We proceed to open the file with radare2:
r2 -A chall Looking at the main function we see that it creates and executes a file from the result of the function @ 0x4006a4.
main retrieve argc store in local variable local_14h retrieve argv store in local variable local_20h store &amp;#34;fileXXXXXX&amp;#34; in local variable template call 4006a4(0x6b7ce0, 0x601080, 0xb6b21) 0x6b7ce0 - global variable empty 0x601080 - global variable pointing to string of chars call mkstemp(template) store return value in fildes = file descriptor call fchmod(fildes, 0x1ff) call write(fildes, 0x6b7ce0, 0x12c000) call fsync(fildes) call close(fildes) call execve(template, 0x0, 0x0) return Running the chall binary generates 13 files and then prompts us for the flag.</description>
    </item>
    
  </channel>
</rss>